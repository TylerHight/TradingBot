package preprocessing;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**
 * The {@code FourierAnalysis} class consists of methods for analyzing the output of Fourier Transform
 * calculations on time series data. This analysis focuses on extracting meaningful insights from the
 * frequency and magnitude pairs generated by the Fourier Transform to assist in the determination of
 * buy or sell signals.
 * <p>
 * Key functionalities include:
 * <ul>
 *   <li>Analyzing frequency magnitudes to identify dominant frequencies.</li>
 *   <li>Calculating the persistence of frequencies based on their magnitudes.</li>
 *   <li>Providing a framework for extending analysis methods as needed.</li>
 * </ul>
 * </p>
 *
 * <p>
 * Usage Example:
 * <pre>
 *     List<Double[]> frequencyMagnitudes = FourierTransform.calculateFFT(prices, timestamps);
 *     Map<Double, Integer> frequencyPersistence = FourierAnalysis.analyzeFrequencyPersistence(frequencyMagnitudes);
 * </pre>
 * </p>
 *
 * @see FourierTransform
 */
public class FourierAnalysis {
    private static final double MAGNITUDE_THRESHOLD = 0.1;

    public static Map<Double, Integer> analyzeFrequencyPersistence(List<Double[]> frequencyMagnitudes) {
        Map<Double, Integer> frequencyCounts = new HashMap<>();

        for (Double[] freqMag : frequencyMagnitudes) {
            double frequency = freqMag[0];
            double magnitude = freqMag[1];

            if (magnitude > MAGNITUDE_THRESHOLD) {
                frequencyCounts.put(frequency, frequencyCounts.getOrDefault(frequency, 0) + 1);
            }
        }

        return frequencyCounts;
    }
}
